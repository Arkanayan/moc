// Copyright (c) Microsoft Corporation.
// Licensed under the Apache v2.0 license.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.4
// source: moc_common_computecommon.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserType int32

const (
	UserType_ROOT UserType = 0
	UserType_USER UserType = 1
)

// Enum value maps for UserType.
var (
	UserType_name = map[int32]string{
		0: "ROOT",
		1: "USER",
	}
	UserType_value = map[string]int32{
		"ROOT": 0,
		"USER": 1,
	}
)

func (x UserType) Enum() *UserType {
	p := new(UserType)
	*p = x
	return p
}

func (x UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_moc_common_computecommon_proto_enumTypes[0].Descriptor()
}

func (UserType) Type() protoreflect.EnumType {
	return &file_moc_common_computecommon_proto_enumTypes[0]
}

func (x UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserType.Descriptor instead.
func (UserType) EnumDescriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{0}
}

type ProcessorType int32

const (
	ProcessorType_None    ProcessorType = 0
	ProcessorType_Intel   ProcessorType = 1
	ProcessorType_Intel64 ProcessorType = 2
	ProcessorType_AMD     ProcessorType = 3
	ProcessorType_AMD64   ProcessorType = 4
	ProcessorType_ARM     ProcessorType = 5
	ProcessorType_ARM64   ProcessorType = 6
)

// Enum value maps for ProcessorType.
var (
	ProcessorType_name = map[int32]string{
		0: "None",
		1: "Intel",
		2: "Intel64",
		3: "AMD",
		4: "AMD64",
		5: "ARM",
		6: "ARM64",
	}
	ProcessorType_value = map[string]int32{
		"None":    0,
		"Intel":   1,
		"Intel64": 2,
		"AMD":     3,
		"AMD64":   4,
		"ARM":     5,
		"ARM64":   6,
	}
)

func (x ProcessorType) Enum() *ProcessorType {
	p := new(ProcessorType)
	*p = x
	return p
}

func (x ProcessorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessorType) Descriptor() protoreflect.EnumDescriptor {
	return file_moc_common_computecommon_proto_enumTypes[1].Descriptor()
}

func (ProcessorType) Type() protoreflect.EnumType {
	return &file_moc_common_computecommon_proto_enumTypes[1]
}

func (x ProcessorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessorType.Descriptor instead.
func (ProcessorType) EnumDescriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{1}
}

type OperatingSystemBootstrapEngine int32

const (
	OperatingSystemBootstrapEngine_CLOUD_INIT           OperatingSystemBootstrapEngine = 0 // For both cloud-init and cloudbase-init
	OperatingSystemBootstrapEngine_WINDOWS_ANSWER_FILES OperatingSystemBootstrapEngine = 1
)

// Enum value maps for OperatingSystemBootstrapEngine.
var (
	OperatingSystemBootstrapEngine_name = map[int32]string{
		0: "CLOUD_INIT",
		1: "WINDOWS_ANSWER_FILES",
	}
	OperatingSystemBootstrapEngine_value = map[string]int32{
		"CLOUD_INIT":           0,
		"WINDOWS_ANSWER_FILES": 1,
	}
)

func (x OperatingSystemBootstrapEngine) Enum() *OperatingSystemBootstrapEngine {
	p := new(OperatingSystemBootstrapEngine)
	*p = x
	return p
}

func (x OperatingSystemBootstrapEngine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatingSystemBootstrapEngine) Descriptor() protoreflect.EnumDescriptor {
	return file_moc_common_computecommon_proto_enumTypes[2].Descriptor()
}

func (OperatingSystemBootstrapEngine) Type() protoreflect.EnumType {
	return &file_moc_common_computecommon_proto_enumTypes[2]
}

func (x OperatingSystemBootstrapEngine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatingSystemBootstrapEngine.Descriptor instead.
func (OperatingSystemBootstrapEngine) EnumDescriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{2}
}

type OperatingSystemType int32

const (
	OperatingSystemType_WINDOWS OperatingSystemType = 0
	OperatingSystemType_LINUX   OperatingSystemType = 1
)

// Enum value maps for OperatingSystemType.
var (
	OperatingSystemType_name = map[int32]string{
		0: "WINDOWS",
		1: "LINUX",
	}
	OperatingSystemType_value = map[string]int32{
		"WINDOWS": 0,
		"LINUX":   1,
	}
)

func (x OperatingSystemType) Enum() *OperatingSystemType {
	p := new(OperatingSystemType)
	*p = x
	return p
}

func (x OperatingSystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperatingSystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_moc_common_computecommon_proto_enumTypes[3].Descriptor()
}

func (OperatingSystemType) Type() protoreflect.EnumType {
	return &file_moc_common_computecommon_proto_enumTypes[3]
}

func (x OperatingSystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperatingSystemType.Descriptor instead.
func (OperatingSystemType) EnumDescriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{3}
}

type VirtualMachineSizeType int32

const (
	VirtualMachineSizeType_Default             VirtualMachineSizeType = 0
	VirtualMachineSizeType_Standard_A2_v2      VirtualMachineSizeType = 2
	VirtualMachineSizeType_Standard_A4_v2      VirtualMachineSizeType = 3
	VirtualMachineSizeType_Standard_D2s_v3     VirtualMachineSizeType = 4
	VirtualMachineSizeType_Standard_D4s_v3     VirtualMachineSizeType = 5
	VirtualMachineSizeType_Standard_D8s_v3     VirtualMachineSizeType = 6
	VirtualMachineSizeType_Standard_D16s_v3    VirtualMachineSizeType = 7
	VirtualMachineSizeType_Standard_D32s_v3    VirtualMachineSizeType = 8
	VirtualMachineSizeType_Standard_DS2_v2     VirtualMachineSizeType = 9
	VirtualMachineSizeType_Standard_DS3_v2     VirtualMachineSizeType = 10
	VirtualMachineSizeType_Standard_DS4_v2     VirtualMachineSizeType = 11
	VirtualMachineSizeType_Standard_DS5_v2     VirtualMachineSizeType = 12
	VirtualMachineSizeType_Standard_DS13_v2    VirtualMachineSizeType = 13
	VirtualMachineSizeType_Standard_K8S_v1     VirtualMachineSizeType = 14
	VirtualMachineSizeType_Standard_K8S2_v1    VirtualMachineSizeType = 15
	VirtualMachineSizeType_Standard_K8S3_v1    VirtualMachineSizeType = 16
	VirtualMachineSizeType_Standard_K8S4_v1    VirtualMachineSizeType = 17
	VirtualMachineSizeType_Standard_NK6        VirtualMachineSizeType = 18
	VirtualMachineSizeType_Standard_NK12       VirtualMachineSizeType = 19
	VirtualMachineSizeType_Standard_NV6        VirtualMachineSizeType = 20
	VirtualMachineSizeType_Standard_NV12       VirtualMachineSizeType = 21
	VirtualMachineSizeType_Standard_K8S5_v1    VirtualMachineSizeType = 22
	VirtualMachineSizeType_Standard_DS2_v2_HPN VirtualMachineSizeType = 23
	VirtualMachineSizeType_Standard_DS3_v2_HPN VirtualMachineSizeType = 24
	VirtualMachineSizeType_Standard_DS4_v2_HPN VirtualMachineSizeType = 25
	VirtualMachineSizeType_Standard_F2s_HPN    VirtualMachineSizeType = 26
	VirtualMachineSizeType_Standard_F4s_HPN    VirtualMachineSizeType = 27
	VirtualMachineSizeType_Standard_F8s_HPN    VirtualMachineSizeType = 28
	VirtualMachineSizeType_Standard_F16s_HPN   VirtualMachineSizeType = 29
	VirtualMachineSizeType_Custom_NK           VirtualMachineSizeType = 96
	VirtualMachineSizeType_Custom_Gpupv        VirtualMachineSizeType = 97
	VirtualMachineSizeType_Custom              VirtualMachineSizeType = 98
	VirtualMachineSizeType_Unsupported         VirtualMachineSizeType = 99
)

// Enum value maps for VirtualMachineSizeType.
var (
	VirtualMachineSizeType_name = map[int32]string{
		0:  "Default",
		2:  "Standard_A2_v2",
		3:  "Standard_A4_v2",
		4:  "Standard_D2s_v3",
		5:  "Standard_D4s_v3",
		6:  "Standard_D8s_v3",
		7:  "Standard_D16s_v3",
		8:  "Standard_D32s_v3",
		9:  "Standard_DS2_v2",
		10: "Standard_DS3_v2",
		11: "Standard_DS4_v2",
		12: "Standard_DS5_v2",
		13: "Standard_DS13_v2",
		14: "Standard_K8S_v1",
		15: "Standard_K8S2_v1",
		16: "Standard_K8S3_v1",
		17: "Standard_K8S4_v1",
		18: "Standard_NK6",
		19: "Standard_NK12",
		20: "Standard_NV6",
		21: "Standard_NV12",
		22: "Standard_K8S5_v1",
		23: "Standard_DS2_v2_HPN",
		24: "Standard_DS3_v2_HPN",
		25: "Standard_DS4_v2_HPN",
		26: "Standard_F2s_HPN",
		27: "Standard_F4s_HPN",
		28: "Standard_F8s_HPN",
		29: "Standard_F16s_HPN",
		96: "Custom_NK",
		97: "Custom_Gpupv",
		98: "Custom",
		99: "Unsupported",
	}
	VirtualMachineSizeType_value = map[string]int32{
		"Default":             0,
		"Standard_A2_v2":      2,
		"Standard_A4_v2":      3,
		"Standard_D2s_v3":     4,
		"Standard_D4s_v3":     5,
		"Standard_D8s_v3":     6,
		"Standard_D16s_v3":    7,
		"Standard_D32s_v3":    8,
		"Standard_DS2_v2":     9,
		"Standard_DS3_v2":     10,
		"Standard_DS4_v2":     11,
		"Standard_DS5_v2":     12,
		"Standard_DS13_v2":    13,
		"Standard_K8S_v1":     14,
		"Standard_K8S2_v1":    15,
		"Standard_K8S3_v1":    16,
		"Standard_K8S4_v1":    17,
		"Standard_NK6":        18,
		"Standard_NK12":       19,
		"Standard_NV6":        20,
		"Standard_NV12":       21,
		"Standard_K8S5_v1":    22,
		"Standard_DS2_v2_HPN": 23,
		"Standard_DS3_v2_HPN": 24,
		"Standard_DS4_v2_HPN": 25,
		"Standard_F2s_HPN":    26,
		"Standard_F4s_HPN":    27,
		"Standard_F8s_HPN":    28,
		"Standard_F16s_HPN":   29,
		"Custom_NK":           96,
		"Custom_Gpupv":        97,
		"Custom":              98,
		"Unsupported":         99,
	}
)

func (x VirtualMachineSizeType) Enum() *VirtualMachineSizeType {
	p := new(VirtualMachineSizeType)
	*p = x
	return p
}

func (x VirtualMachineSizeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualMachineSizeType) Descriptor() protoreflect.EnumDescriptor {
	return file_moc_common_computecommon_proto_enumTypes[4].Descriptor()
}

func (VirtualMachineSizeType) Type() protoreflect.EnumType {
	return &file_moc_common_computecommon_proto_enumTypes[4]
}

func (x VirtualMachineSizeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualMachineSizeType.Descriptor instead.
func (VirtualMachineSizeType) EnumDescriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{4}
}

type WinRMProtocolType int32

const (
	WinRMProtocolType_HTTP  WinRMProtocolType = 0
	WinRMProtocolType_HTTPS WinRMProtocolType = 1
)

// Enum value maps for WinRMProtocolType.
var (
	WinRMProtocolType_name = map[int32]string{
		0: "HTTP",
		1: "HTTPS",
	}
	WinRMProtocolType_value = map[string]int32{
		"HTTP":  0,
		"HTTPS": 1,
	}
)

func (x WinRMProtocolType) Enum() *WinRMProtocolType {
	p := new(WinRMProtocolType)
	*p = x
	return p
}

func (x WinRMProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WinRMProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_moc_common_computecommon_proto_enumTypes[5].Descriptor()
}

func (WinRMProtocolType) Type() protoreflect.EnumType {
	return &file_moc_common_computecommon_proto_enumTypes[5]
}

func (x WinRMProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WinRMProtocolType.Descriptor instead.
func (WinRMProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{5}
}

type PowerState int32

const (
	PowerState_Unknown  PowerState = 0
	PowerState_Running  PowerState = 1
	PowerState_Off      PowerState = 2
	PowerState_Paused   PowerState = 3
	PowerState_Critical PowerState = 4
)

// Enum value maps for PowerState.
var (
	PowerState_name = map[int32]string{
		0: "Unknown",
		1: "Running",
		2: "Off",
		3: "Paused",
		4: "Critical",
	}
	PowerState_value = map[string]int32{
		"Unknown":  0,
		"Running":  1,
		"Off":      2,
		"Paused":   3,
		"Critical": 4,
	}
)

func (x PowerState) Enum() *PowerState {
	p := new(PowerState)
	*p = x
	return p
}

func (x PowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_moc_common_computecommon_proto_enumTypes[6].Descriptor()
}

func (PowerState) Type() protoreflect.EnumType {
	return &file_moc_common_computecommon_proto_enumTypes[6]
}

func (x PowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerState.Descriptor instead.
func (PowerState) EnumDescriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{6}
}

type VirtualMachineOperation int32

const (
	VirtualMachineOperation_START VirtualMachineOperation = 0
	VirtualMachineOperation_STOP  VirtualMachineOperation = 1
	VirtualMachineOperation_RESET VirtualMachineOperation = 2
)

// Enum value maps for VirtualMachineOperation.
var (
	VirtualMachineOperation_name = map[int32]string{
		0: "START",
		1: "STOP",
		2: "RESET",
	}
	VirtualMachineOperation_value = map[string]int32{
		"START": 0,
		"STOP":  1,
		"RESET": 2,
	}
)

func (x VirtualMachineOperation) Enum() *VirtualMachineOperation {
	p := new(VirtualMachineOperation)
	*p = x
	return p
}

func (x VirtualMachineOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualMachineOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_moc_common_computecommon_proto_enumTypes[7].Descriptor()
}

func (VirtualMachineOperation) Type() protoreflect.EnumType {
	return &file_moc_common_computecommon_proto_enumTypes[7]
}

func (x VirtualMachineOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualMachineOperation.Descriptor instead.
func (VirtualMachineOperation) EnumDescriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{7}
}

type VirtualMachineRunCommandExecutionState int32

const (
	VirtualMachineRunCommandExecutionState_ExecutionState_UNKNOWN   VirtualMachineRunCommandExecutionState = 0
	VirtualMachineRunCommandExecutionState_ExecutionState_FAILED    VirtualMachineRunCommandExecutionState = 1
	VirtualMachineRunCommandExecutionState_ExecutionState_SUCCEEDED VirtualMachineRunCommandExecutionState = 2
)

// Enum value maps for VirtualMachineRunCommandExecutionState.
var (
	VirtualMachineRunCommandExecutionState_name = map[int32]string{
		0: "ExecutionState_UNKNOWN",
		1: "ExecutionState_FAILED",
		2: "ExecutionState_SUCCEEDED",
	}
	VirtualMachineRunCommandExecutionState_value = map[string]int32{
		"ExecutionState_UNKNOWN":   0,
		"ExecutionState_FAILED":    1,
		"ExecutionState_SUCCEEDED": 2,
	}
)

func (x VirtualMachineRunCommandExecutionState) Enum() *VirtualMachineRunCommandExecutionState {
	p := new(VirtualMachineRunCommandExecutionState)
	*p = x
	return p
}

func (x VirtualMachineRunCommandExecutionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualMachineRunCommandExecutionState) Descriptor() protoreflect.EnumDescriptor {
	return file_moc_common_computecommon_proto_enumTypes[8].Descriptor()
}

func (VirtualMachineRunCommandExecutionState) Type() protoreflect.EnumType {
	return &file_moc_common_computecommon_proto_enumTypes[8]
}

func (x VirtualMachineRunCommandExecutionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualMachineRunCommandExecutionState.Descriptor instead.
func (VirtualMachineRunCommandExecutionState) EnumDescriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{8}
}

type WinRMListener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol WinRMProtocolType `protobuf:"varint,1,opt,name=Protocol,proto3,enum=moc.WinRMProtocolType" json:"Protocol,omitempty"`
}

func (x *WinRMListener) Reset() {
	*x = WinRMListener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moc_common_computecommon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinRMListener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinRMListener) ProtoMessage() {}

func (x *WinRMListener) ProtoReflect() protoreflect.Message {
	mi := &file_moc_common_computecommon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinRMListener.ProtoReflect.Descriptor instead.
func (*WinRMListener) Descriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{0}
}

func (x *WinRMListener) GetProtocol() WinRMProtocolType {
	if x != nil {
		return x.Protocol
	}
	return WinRMProtocolType_HTTP
}

type WinRMConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listeners []*WinRMListener `protobuf:"bytes,1,rep,name=Listeners,proto3" json:"Listeners,omitempty"`
}

func (x *WinRMConfiguration) Reset() {
	*x = WinRMConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moc_common_computecommon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinRMConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinRMConfiguration) ProtoMessage() {}

func (x *WinRMConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_moc_common_computecommon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinRMConfiguration.ProtoReflect.Descriptor instead.
func (*WinRMConfiguration) Descriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{1}
}

func (x *WinRMConfiguration) GetListeners() []*WinRMListener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

type VirtualMachineCustomSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuCount int32 `protobuf:"varint,1,opt,name=cpuCount,proto3" json:"cpuCount,omitempty"`
	MemoryMB int32 `protobuf:"varint,2,opt,name=memoryMB,proto3" json:"memoryMB,omitempty"`
	GpuCount int32 `protobuf:"varint,3,opt,name=gpuCount,proto3" json:"gpuCount,omitempty"`
}

func (x *VirtualMachineCustomSize) Reset() {
	*x = VirtualMachineCustomSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moc_common_computecommon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineCustomSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineCustomSize) ProtoMessage() {}

func (x *VirtualMachineCustomSize) ProtoReflect() protoreflect.Message {
	mi := &file_moc_common_computecommon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineCustomSize.ProtoReflect.Descriptor instead.
func (*VirtualMachineCustomSize) Descriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{2}
}

func (x *VirtualMachineCustomSize) GetCpuCount() int32 {
	if x != nil {
		return x.CpuCount
	}
	return 0
}

func (x *VirtualMachineCustomSize) GetMemoryMB() int32 {
	if x != nil {
		return x.MemoryMB
	}
	return 0
}

func (x *VirtualMachineCustomSize) GetGpuCount() int32 {
	if x != nil {
		return x.GpuCount
	}
	return 0
}

type DynamicMemoryConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaximumMemoryMB    uint64 `protobuf:"varint,1,opt,name=maximumMemoryMB,proto3" json:"maximumMemoryMB,omitempty"`
	MinimumMemoryMB    uint64 `protobuf:"varint,2,opt,name=minimumMemoryMB,proto3" json:"minimumMemoryMB,omitempty"`
	TargetMemoryBuffer uint32 `protobuf:"varint,3,opt,name=targetMemoryBuffer,proto3" json:"targetMemoryBuffer,omitempty"`
}

func (x *DynamicMemoryConfiguration) Reset() {
	*x = DynamicMemoryConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moc_common_computecommon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicMemoryConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicMemoryConfiguration) ProtoMessage() {}

func (x *DynamicMemoryConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_moc_common_computecommon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicMemoryConfiguration.ProtoReflect.Descriptor instead.
func (*DynamicMemoryConfiguration) Descriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{3}
}

func (x *DynamicMemoryConfiguration) GetMaximumMemoryMB() uint64 {
	if x != nil {
		return x.MaximumMemoryMB
	}
	return 0
}

func (x *DynamicMemoryConfiguration) GetMinimumMemoryMB() uint64 {
	if x != nil {
		return x.MinimumMemoryMB
	}
	return 0
}

func (x *DynamicMemoryConfiguration) GetTargetMemoryBuffer() uint32 {
	if x != nil {
		return x.TargetMemoryBuffer
	}
	return 0
}

type VirtualMachineRunCommandInputParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *VirtualMachineRunCommandInputParameter) Reset() {
	*x = VirtualMachineRunCommandInputParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moc_common_computecommon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineRunCommandInputParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineRunCommandInputParameter) ProtoMessage() {}

func (x *VirtualMachineRunCommandInputParameter) ProtoReflect() protoreflect.Message {
	mi := &file_moc_common_computecommon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineRunCommandInputParameter.ProtoReflect.Descriptor instead.
func (*VirtualMachineRunCommandInputParameter) Descriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{4}
}

func (x *VirtualMachineRunCommandInputParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirtualMachineRunCommandInputParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type VirtualMachineRunCommandScriptSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script    string `protobuf:"bytes,1,opt,name=Script,proto3" json:"Script,omitempty"`
	ScriptURI string `protobuf:"bytes,2,opt,name=ScriptURI,proto3" json:"ScriptURI,omitempty"`
	CommandID string `protobuf:"bytes,3,opt,name=CommandID,proto3" json:"CommandID,omitempty"`
}

func (x *VirtualMachineRunCommandScriptSource) Reset() {
	*x = VirtualMachineRunCommandScriptSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moc_common_computecommon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineRunCommandScriptSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineRunCommandScriptSource) ProtoMessage() {}

func (x *VirtualMachineRunCommandScriptSource) ProtoReflect() protoreflect.Message {
	mi := &file_moc_common_computecommon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineRunCommandScriptSource.ProtoReflect.Descriptor instead.
func (*VirtualMachineRunCommandScriptSource) Descriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{5}
}

func (x *VirtualMachineRunCommandScriptSource) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *VirtualMachineRunCommandScriptSource) GetScriptURI() string {
	if x != nil {
		return x.ScriptURI
	}
	return ""
}

func (x *VirtualMachineRunCommandScriptSource) GetCommandID() string {
	if x != nil {
		return x.CommandID
	}
	return ""
}

type VirtualMachineRunCommandInstanceView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionState VirtualMachineRunCommandExecutionState `protobuf:"varint,1,opt,name=ExecutionState,proto3,enum=moc.VirtualMachineRunCommandExecutionState" json:"ExecutionState,omitempty"`
	ExitCode       int32                                  `protobuf:"varint,2,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	Output         string                                 `protobuf:"bytes,3,opt,name=Output,proto3" json:"Output,omitempty"`
	Error          string                                 `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *VirtualMachineRunCommandInstanceView) Reset() {
	*x = VirtualMachineRunCommandInstanceView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_moc_common_computecommon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineRunCommandInstanceView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineRunCommandInstanceView) ProtoMessage() {}

func (x *VirtualMachineRunCommandInstanceView) ProtoReflect() protoreflect.Message {
	mi := &file_moc_common_computecommon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineRunCommandInstanceView.ProtoReflect.Descriptor instead.
func (*VirtualMachineRunCommandInstanceView) Descriptor() ([]byte, []int) {
	return file_moc_common_computecommon_proto_rawDescGZIP(), []int{6}
}

func (x *VirtualMachineRunCommandInstanceView) GetExecutionState() VirtualMachineRunCommandExecutionState {
	if x != nil {
		return x.ExecutionState
	}
	return VirtualMachineRunCommandExecutionState_ExecutionState_UNKNOWN
}

func (x *VirtualMachineRunCommandInstanceView) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *VirtualMachineRunCommandInstanceView) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *VirtualMachineRunCommandInstanceView) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_moc_common_computecommon_proto protoreflect.FileDescriptor

var file_moc_common_computecommon_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x6f, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x6d, 0x6f, 0x63, 0x22, 0x43, 0x0a, 0x0d, 0x57, 0x69, 0x6e, 0x52, 0x4d, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x63, 0x2e, 0x57,
	0x69, 0x6e, 0x52, 0x4d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x46, 0x0a, 0x12, 0x57, 0x69,
	0x6e, 0x52, 0x4d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x63, 0x2e, 0x57, 0x69, 0x6e, 0x52, 0x4d, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x73, 0x22, 0x6e, 0x0a, 0x18, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4d, 0x42, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x42, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4d, 0x42, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x26, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7a, 0x0a, 0x24, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x55, 0x52, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x55, 0x52, 0x49, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x44, 0x22, 0xc5, 0x01, 0x0a, 0x24, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x53,
	0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x63, 0x2e, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x1e, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4f,
	0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x59, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x65,
	0x6c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x36, 0x34, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4d, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4d, 0x44,
	0x36, 0x34, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x4d, 0x10, 0x05, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x52, 0x4d, 0x36, 0x34, 0x10, 0x06, 0x2a, 0x4a, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x49,
	0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x53, 0x10, 0x01, 0x2a, 0x2d, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x49, 0x4e, 0x55,
	0x58, 0x10, 0x01, 0x2a, 0xbb, 0x05, 0x0a, 0x16, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x41, 0x32, 0x5f, 0x76, 0x32, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x41, 0x34, 0x5f, 0x76,
	0x32, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f,
	0x44, 0x32, 0x73, 0x5f, 0x76, 0x33, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x34, 0x73, 0x5f, 0x76, 0x33, 0x10, 0x05, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x38, 0x73, 0x5f, 0x76, 0x33,
	0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x44,
	0x31, 0x36, 0x73, 0x5f, 0x76, 0x33, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x33, 0x32, 0x73, 0x5f, 0x76, 0x33, 0x10, 0x08, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x53, 0x32, 0x5f, 0x76,
	0x32, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f,
	0x44, 0x53, 0x33, 0x5f, 0x76, 0x32, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x53, 0x34, 0x5f, 0x76, 0x32, 0x10, 0x0b, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x53, 0x35, 0x5f, 0x76, 0x32,
	0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x44,
	0x53, 0x31, 0x33, 0x5f, 0x76, 0x32, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x5f, 0x4b, 0x38, 0x53, 0x5f, 0x76, 0x31, 0x10, 0x0e, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x4b, 0x38, 0x53, 0x32, 0x5f, 0x76,
	0x31, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f,
	0x4b, 0x38, 0x53, 0x33, 0x5f, 0x76, 0x31, 0x10, 0x10, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x4b, 0x38, 0x53, 0x34, 0x5f, 0x76, 0x31, 0x10, 0x11, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x4e, 0x4b, 0x36, 0x10,
	0x12, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x4e, 0x4b,
	0x31, 0x32, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x5f, 0x4e, 0x56, 0x36, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x5f, 0x4e, 0x56, 0x31, 0x32, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x4b, 0x38, 0x53, 0x35, 0x5f, 0x76, 0x31, 0x10, 0x16, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x53, 0x32, 0x5f,
	0x76, 0x32, 0x5f, 0x48, 0x50, 0x4e, 0x10, 0x17, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x53, 0x33, 0x5f, 0x76, 0x32, 0x5f, 0x48, 0x50, 0x4e, 0x10,
	0x18, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x53,
	0x34, 0x5f, 0x76, 0x32, 0x5f, 0x48, 0x50, 0x4e, 0x10, 0x19, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x46, 0x32, 0x73, 0x5f, 0x48, 0x50, 0x4e, 0x10, 0x1a,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x46, 0x34, 0x73,
	0x5f, 0x48, 0x50, 0x4e, 0x10, 0x1b, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x5f, 0x46, 0x38, 0x73, 0x5f, 0x48, 0x50, 0x4e, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f, 0x46, 0x31, 0x36, 0x73, 0x5f, 0x48, 0x50,
	0x4e, 0x10, 0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x4e, 0x4b,
	0x10, 0x60, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x47, 0x70, 0x75,
	0x70, 0x76, 0x10, 0x61, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x62,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10,
	0x63, 0x2a, 0x28, 0x0a, 0x11, 0x57, 0x69, 0x6e, 0x52, 0x4d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x10, 0x01, 0x2a, 0x49, 0x0a, 0x0a, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x66, 0x66, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x72, 0x69, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x10, 0x04, 0x2a, 0x39, 0x0a, 0x17, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10,
	0x02, 0x2a, 0x7d, 0x0a, 0x26, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x02,
	0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2f, 0x6d, 0x6f, 0x63, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_moc_common_computecommon_proto_rawDescOnce sync.Once
	file_moc_common_computecommon_proto_rawDescData = file_moc_common_computecommon_proto_rawDesc
)

func file_moc_common_computecommon_proto_rawDescGZIP() []byte {
	file_moc_common_computecommon_proto_rawDescOnce.Do(func() {
		file_moc_common_computecommon_proto_rawDescData = protoimpl.X.CompressGZIP(file_moc_common_computecommon_proto_rawDescData)
	})
	return file_moc_common_computecommon_proto_rawDescData
}

var file_moc_common_computecommon_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_moc_common_computecommon_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_moc_common_computecommon_proto_goTypes = []interface{}{
	(UserType)(0),                                  // 0: moc.UserType
	(ProcessorType)(0),                             // 1: moc.ProcessorType
	(OperatingSystemBootstrapEngine)(0),            // 2: moc.OperatingSystemBootstrapEngine
	(OperatingSystemType)(0),                       // 3: moc.OperatingSystemType
	(VirtualMachineSizeType)(0),                    // 4: moc.VirtualMachineSizeType
	(WinRMProtocolType)(0),                         // 5: moc.WinRMProtocolType
	(PowerState)(0),                                // 6: moc.PowerState
	(VirtualMachineOperation)(0),                   // 7: moc.VirtualMachineOperation
	(VirtualMachineRunCommandExecutionState)(0),    // 8: moc.VirtualMachineRunCommandExecutionState
	(*WinRMListener)(nil),                          // 9: moc.WinRMListener
	(*WinRMConfiguration)(nil),                     // 10: moc.WinRMConfiguration
	(*VirtualMachineCustomSize)(nil),               // 11: moc.VirtualMachineCustomSize
	(*DynamicMemoryConfiguration)(nil),             // 12: moc.DynamicMemoryConfiguration
	(*VirtualMachineRunCommandInputParameter)(nil), // 13: moc.VirtualMachineRunCommandInputParameter
	(*VirtualMachineRunCommandScriptSource)(nil),   // 14: moc.VirtualMachineRunCommandScriptSource
	(*VirtualMachineRunCommandInstanceView)(nil),   // 15: moc.VirtualMachineRunCommandInstanceView
}
var file_moc_common_computecommon_proto_depIdxs = []int32{
	5, // 0: moc.WinRMListener.Protocol:type_name -> moc.WinRMProtocolType
	9, // 1: moc.WinRMConfiguration.Listeners:type_name -> moc.WinRMListener
	8, // 2: moc.VirtualMachineRunCommandInstanceView.ExecutionState:type_name -> moc.VirtualMachineRunCommandExecutionState
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_moc_common_computecommon_proto_init() }
func file_moc_common_computecommon_proto_init() {
	if File_moc_common_computecommon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_moc_common_computecommon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinRMListener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moc_common_computecommon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinRMConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moc_common_computecommon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineCustomSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moc_common_computecommon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicMemoryConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moc_common_computecommon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineRunCommandInputParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moc_common_computecommon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineRunCommandScriptSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_moc_common_computecommon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineRunCommandInstanceView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_moc_common_computecommon_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_moc_common_computecommon_proto_goTypes,
		DependencyIndexes: file_moc_common_computecommon_proto_depIdxs,
		EnumInfos:         file_moc_common_computecommon_proto_enumTypes,
		MessageInfos:      file_moc_common_computecommon_proto_msgTypes,
	}.Build()
	File_moc_common_computecommon_proto = out.File
	file_moc_common_computecommon_proto_rawDesc = nil
	file_moc_common_computecommon_proto_goTypes = nil
	file_moc_common_computecommon_proto_depIdxs = nil
}
