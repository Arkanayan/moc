// Code generated by protoc-gen-go. DO NOT EDIT.
// source: admin/version/moc_common_version.proto

package admin

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VersionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionRequest) Reset()         { *m = VersionRequest{} }
func (m *VersionRequest) String() string { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()    {}
func (*VersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cb73079ee2df4fc, []int{0}
}

func (m *VersionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionRequest.Unmarshal(m, b)
}
func (m *VersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionRequest.Marshal(b, m, deterministic)
}
func (m *VersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionRequest.Merge(m, src)
}
func (m *VersionRequest) XXX_Size() int {
	return xxx_messageInfo_VersionRequest.Size(m)
}
func (m *VersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VersionRequest proto.InternalMessageInfo

type VersionResponse struct {
	Verion               string   `protobuf:"bytes,1,opt,name=verion,proto3" json:"verion,omitempty"`
	Mocversion           string   `protobuf:"bytes,2,opt,name=mocversion,proto3" json:"mocversion,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VersionResponse) Reset()         { *m = VersionResponse{} }
func (m *VersionResponse) String() string { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()    {}
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2cb73079ee2df4fc, []int{1}
}

func (m *VersionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VersionResponse.Unmarshal(m, b)
}
func (m *VersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VersionResponse.Marshal(b, m, deterministic)
}
func (m *VersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VersionResponse.Merge(m, src)
}
func (m *VersionResponse) XXX_Size() int {
	return xxx_messageInfo_VersionResponse.Size(m)
}
func (m *VersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VersionResponse proto.InternalMessageInfo

func (m *VersionResponse) GetVerion() string {
	if m != nil {
		return m.Verion
	}
	return ""
}

func (m *VersionResponse) GetMocversion() string {
	if m != nil {
		return m.Mocversion
	}
	return ""
}

func (m *VersionResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionRequest)(nil), "moc.common.admin.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "moc.common.admin.VersionResponse")
}

func init() {
	proto.RegisterFile("admin/version/moc_common_version.proto", fileDescriptor_2cb73079ee2df4fc)
}

var fileDescriptor_2cb73079ee2df4fc = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0x31, 0x4b, 0xc6, 0x30,
	0x14, 0xb4, 0x7e, 0x58, 0xf0, 0x21, 0x5a, 0x82, 0x48, 0x71, 0x90, 0xda, 0x41, 0x14, 0x21, 0x11,
	0xfd, 0x05, 0xba, 0xb8, 0x39, 0x74, 0x70, 0x70, 0xb0, 0xd8, 0xf8, 0xac, 0x19, 0x92, 0x57, 0x5f,
	0xd2, 0xfe, 0x7e, 0x69, 0x12, 0x44, 0x1d, 0xbe, 0xf1, 0xdd, 0xdd, 0xbb, 0x3b, 0x0e, 0x2e, 0xde,
	0xde, 0xad, 0x71, 0x6a, 0x41, 0xf6, 0x86, 0x9c, 0xb2, 0xa4, 0x7b, 0x4d, 0xd6, 0x92, 0xeb, 0x33,
	0x24, 0x27, 0xa6, 0x40, 0xa2, 0xb2, 0xa4, 0x65, 0x62, 0x64, 0x7c, 0x69, 0x2b, 0x38, 0x7c, 0x4e,
	0x92, 0x0e, 0xbf, 0x66, 0xf4, 0xa1, 0xed, 0xe1, 0xe8, 0x07, 0xf1, 0x13, 0x39, 0x8f, 0xe2, 0x04,
	0xca, 0x05, 0xd9, 0x90, 0xab, 0x8b, 0xa6, 0xb8, 0xdc, 0xef, 0xf2, 0x25, 0xce, 0x00, 0x2c, 0xe9,
	0x1c, 0x51, 0xef, 0x46, 0xee, 0x17, 0x22, 0x8e, 0x61, 0x0f, 0x99, 0x89, 0xeb, 0x4d, 0xa4, 0xd2,
	0x71, 0xfb, 0x0a, 0x07, 0x39, 0xe0, 0x7e, 0x44, 0x17, 0xc4, 0x13, 0x6c, 0x1e, 0x31, 0x88, 0x46,
	0xfe, 0x2f, 0x27, 0xff, 0x36, 0x3b, 0x3d, 0xdf, 0xa2, 0x48, 0x4d, 0xdb, 0x9d, 0x9b, 0xe2, 0xe1,
	0xfa, 0xe5, 0x6a, 0x34, 0xe1, 0x73, 0x1e, 0x56, 0xa9, 0xb2, 0x46, 0x33, 0x79, 0xfa, 0x08, 0xeb,
	0x2a, 0x8a, 0x27, 0xad, 0x92, 0x81, 0x8a, 0x06, 0x43, 0x19, 0x87, 0xb9, 0xfb, 0x0e, 0x00, 0x00,
	0xff, 0xff, 0x90, 0x99, 0x2c, 0x5f, 0x42, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VersionAgentClient is the client API for VersionAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersionAgentClient interface {
	Get(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (VersionAgent_GetClient, error)
}

type versionAgentClient struct {
	cc *grpc.ClientConn
}

func NewVersionAgentClient(cc *grpc.ClientConn) VersionAgentClient {
	return &versionAgentClient{cc}
}

func (c *versionAgentClient) Get(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (VersionAgent_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VersionAgent_serviceDesc.Streams[0], "/moc.common.admin.VersionAgent/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &versionAgentGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VersionAgent_GetClient interface {
	Recv() (*VersionResponse, error)
	grpc.ClientStream
}

type versionAgentGetClient struct {
	grpc.ClientStream
}

func (x *versionAgentGetClient) Recv() (*VersionResponse, error) {
	m := new(VersionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VersionAgentServer is the server API for VersionAgent service.
type VersionAgentServer interface {
	Get(*VersionRequest, VersionAgent_GetServer) error
}

// UnimplementedVersionAgentServer can be embedded to have forward compatible implementations.
type UnimplementedVersionAgentServer struct {
}

func (*UnimplementedVersionAgentServer) Get(req *VersionRequest, srv VersionAgent_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterVersionAgentServer(s *grpc.Server, srv VersionAgentServer) {
	s.RegisterService(&_VersionAgent_serviceDesc, srv)
}

func _VersionAgent_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VersionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VersionAgentServer).Get(m, &versionAgentGetServer{stream})
}

type VersionAgent_GetServer interface {
	Send(*VersionResponse) error
	grpc.ServerStream
}

type versionAgentGetServer struct {
	grpc.ServerStream
}

func (x *versionAgentGetServer) Send(m *VersionResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _VersionAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moc.common.admin.VersionAgent",
	HandlerType: (*VersionAgentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _VersionAgent_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin/version/moc_common_version.proto",
}
