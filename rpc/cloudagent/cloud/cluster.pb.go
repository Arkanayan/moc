// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cluster.proto

package cloud

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	common "github.com/microsoft/moc-proto/rpc/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClusterResponse struct {
	Clusters             []*Cluster          `protobuf:"bytes,1,rep,name=Clusters,proto3" json:"Clusters,omitempty"`
	Result               *wrappers.BoolValue `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	Error                string              `protobuf:"bytes,3,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ClusterResponse) Reset()         { *m = ClusterResponse{} }
func (m *ClusterResponse) String() string { return proto.CompactTextString(m) }
func (*ClusterResponse) ProtoMessage()    {}
func (*ClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{0}
}

func (m *ClusterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClusterResponse.Unmarshal(m, b)
}
func (m *ClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClusterResponse.Marshal(b, m, deterministic)
}
func (m *ClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClusterResponse.Merge(m, src)
}
func (m *ClusterResponse) XXX_Size() int {
	return xxx_messageInfo_ClusterResponse.Size(m)
}
func (m *ClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClusterResponse proto.InternalMessageInfo

func (m *ClusterResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ClusterResponse) GetResult() *wrappers.BoolValue {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ClusterResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type Cluster struct {
	Name                 string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                   string         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Fqdn                 string         `protobuf:"bytes,3,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	Status               *common.Status `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	UserOwned            bool           `protobuf:"varint,5,opt,name=UserOwned,proto3" json:"UserOwned,omitempty"`
	IsLocalCluster       bool           `protobuf:"varint,6,opt,name=IsLocalCluster,proto3" json:"IsLocalCluster,omitempty"`
	Domain               string         `protobuf:"bytes,7,opt,name=domain,proto3" json:"domain,omitempty"`
	Nodes                []*Node        `protobuf:"bytes,8,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	LocationName         string         `protobuf:"bytes,9,opt,name=locationName,proto3" json:"locationName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_3cfb3b8ec240c376, []int{1}
}

func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cluster.Unmarshal(m, b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return xxx_messageInfo_Cluster.Size(m)
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Cluster) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *Cluster) GetStatus() *common.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Cluster) GetUserOwned() bool {
	if m != nil {
		return m.UserOwned
	}
	return false
}

func (m *Cluster) GetIsLocalCluster() bool {
	if m != nil {
		return m.IsLocalCluster
	}
	return false
}

func (m *Cluster) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Cluster) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Cluster) GetLocationName() string {
	if m != nil {
		return m.LocationName
	}
	return ""
}

func init() {
	proto.RegisterType((*ClusterResponse)(nil), "moc.cloudagent.cluster.ClusterResponse")
	proto.RegisterType((*Cluster)(nil), "moc.cloudagent.cluster.Cluster")
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor_3cfb3b8ec240c376) }

var fileDescriptor_3cfb3b8ec240c376 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0x65, 0xb7, 0xcd, 0x36, 0x99, 0xa4, 0x45, 0xb2, 0x50, 0x65, 0x22, 0x04, 0x21, 0x48, 0x90,
	0x0b, 0x5e, 0x29, 0x15, 0x27, 0x4e, 0x14, 0xa1, 0x0a, 0xa9, 0x2a, 0x68, 0x51, 0x11, 0x1f, 0x27,
	0xc7, 0x76, 0xc2, 0x4a, 0x5e, 0xcf, 0x62, 0x7b, 0xd5, 0xbf, 0x02, 0x7f, 0x93, 0x5f, 0x80, 0x62,
	0x3b, 0xad, 0xa8, 0xa8, 0x72, 0xca, 0x6d, 0xe6, 0xcd, 0x9b, 0x37, 0xcf, 0x33, 0x86, 0x43, 0xa1,
	0x3b, 0xe7, 0x95, 0x65, 0xad, 0x45, 0x8f, 0xe4, 0xb8, 0x41, 0xc1, 0x84, 0xc6, 0x4e, 0xf2, 0x95,
	0x32, 0x9e, 0xa5, 0xea, 0xf8, 0xf1, 0x0a, 0x71, 0xa5, 0x55, 0x19, 0x58, 0x8b, 0x6e, 0x59, 0x5e,
	0x59, 0xde, 0xb6, 0xca, 0xba, 0xd8, 0x37, 0x1e, 0x09, 0x6c, 0x1a, 0x34, 0x29, 0x03, 0x83, 0x52,
	0xc5, 0x78, 0xfa, 0x2b, 0x83, 0xfb, 0x6f, 0xa3, 0x4a, 0xa5, 0x5c, 0x8b, 0xc6, 0x29, 0xf2, 0x1a,
	0xfa, 0x09, 0x72, 0x34, 0x9b, 0xec, 0xcd, 0x86, 0xf3, 0x27, 0xec, 0xff, 0x83, 0xd9, 0xa6, 0xf5,
	0xba, 0x81, 0xcc, 0xa1, 0xa8, 0x94, 0xeb, 0xb4, 0xa7, 0xf9, 0x24, 0x9b, 0x0d, 0xe7, 0x63, 0x16,
	0xbd, 0xb1, 0x8d, 0x37, 0x76, 0x8a, 0xa8, 0x3f, 0x73, 0xdd, 0xa9, 0x2a, 0x31, 0xc9, 0x03, 0xe8,
	0xbd, 0xb3, 0x16, 0x2d, 0xdd, 0x9b, 0x64, 0xb3, 0x41, 0x15, 0x93, 0xe9, 0xef, 0x1c, 0x0e, 0x92,
	0x2c, 0x21, 0xb0, 0x6f, 0x78, 0xa3, 0x68, 0x16, 0x08, 0x21, 0x26, 0x47, 0x90, 0xd7, 0x32, 0x4c,
	0x19, 0x54, 0x79, 0x2d, 0xd7, 0x9c, 0xe5, 0x4f, 0x69, 0x92, 0x48, 0x88, 0xc9, 0x33, 0x28, 0x9c,
	0xe7, 0xbe, 0x73, 0x74, 0x3f, 0xb8, 0x19, 0x86, 0x87, 0x7c, 0x0a, 0x50, 0x95, 0x4a, 0xe4, 0x11,
	0x0c, 0x2e, 0x9d, 0xb2, 0x1f, 0xae, 0x8c, 0x92, 0xb4, 0x37, 0xc9, 0x66, 0xfd, 0xea, 0x06, 0x20,
	0xcf, 0xe1, 0xe8, 0xbd, 0x3b, 0x47, 0xc1, 0x75, 0x32, 0x43, 0x8b, 0x40, 0xb9, 0x85, 0x92, 0x63,
	0x28, 0x24, 0x36, 0xbc, 0x36, 0xf4, 0x20, 0x18, 0x48, 0x19, 0x29, 0xa1, 0x77, 0x81, 0x52, 0x39,
	0xda, 0x0f, 0xab, 0x7c, 0x78, 0x7b, 0x95, 0xe1, 0x18, 0x6b, 0x46, 0x15, 0x79, 0x64, 0x0a, 0x23,
	0x8d, 0x82, 0xfb, 0x1a, 0xcd, 0xc5, 0xfa, 0xcd, 0x83, 0x20, 0xf7, 0x0f, 0x36, 0xff, 0x93, 0xc3,
	0x28, 0x0d, 0x7e, 0xb3, 0x56, 0x21, 0x5f, 0x61, 0x78, 0x8e, 0x5c, 0x6e, 0xcc, 0x6c, 0x3b, 0xd8,
	0xf8, 0xc5, 0xb6, 0x8b, 0xa6, 0xcf, 0x30, 0xbd, 0x47, 0xbe, 0xc3, 0xe1, 0xa5, 0xd1, 0x3b, 0x12,
	0xff, 0x02, 0x70, 0xa6, 0xfc, 0x2e, 0x94, 0x3f, 0x42, 0xff, 0x4c, 0xf9, 0xb8, 0xd2, 0xad, 0xba,
	0x4f, 0xef, 0xbe, 0xca, 0xb5, 0xe2, 0xe9, 0xab, 0x6f, 0x27, 0xab, 0xda, 0xff, 0xe8, 0x16, 0x4c,
	0x60, 0x53, 0x36, 0xb5, 0xb0, 0xe8, 0x70, 0xe9, 0xcb, 0x06, 0xc5, 0xcb, 0xf0, 0xbb, 0x4b, 0xdb,
	0x8a, 0xf2, 0x46, 0x24, 0x86, 0x8b, 0x22, 0xd4, 0x4e, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x83,
	0xbb, 0x1c, 0x5a, 0xcc, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterAgentClient is the client API for ClusterAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterAgentClient interface {
	LoadCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*ClusterResponse, error)
	UnloadCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*ClusterResponse, error)
	GetCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*ClusterResponse, error)
	GetNodes(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*NodeResponse, error)
}

type clusterAgentClient struct {
	cc *grpc.ClientConn
}

func NewClusterAgentClient(cc *grpc.ClientConn) ClusterAgentClient {
	return &clusterAgentClient{cc}
}

func (c *clusterAgentClient) LoadCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/moc.cloudagent.cluster.ClusterAgent/LoadCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAgentClient) UnloadCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/moc.cloudagent.cluster.ClusterAgent/UnloadCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAgentClient) GetCluster(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/moc.cloudagent.cluster.ClusterAgent/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterAgentClient) GetNodes(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/moc.cloudagent.cluster.ClusterAgent/GetNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterAgentServer is the server API for ClusterAgent service.
type ClusterAgentServer interface {
	LoadCluster(context.Context, *Cluster) (*ClusterResponse, error)
	UnloadCluster(context.Context, *Cluster) (*ClusterResponse, error)
	GetCluster(context.Context, *Cluster) (*ClusterResponse, error)
	GetNodes(context.Context, *Cluster) (*NodeResponse, error)
}

// UnimplementedClusterAgentServer can be embedded to have forward compatible implementations.
type UnimplementedClusterAgentServer struct {
}

func (*UnimplementedClusterAgentServer) LoadCluster(ctx context.Context, req *Cluster) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCluster not implemented")
}
func (*UnimplementedClusterAgentServer) UnloadCluster(ctx context.Context, req *Cluster) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnloadCluster not implemented")
}
func (*UnimplementedClusterAgentServer) GetCluster(ctx context.Context, req *Cluster) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (*UnimplementedClusterAgentServer) GetNodes(ctx context.Context, req *Cluster) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}

func RegisterClusterAgentServer(s *grpc.Server, srv ClusterAgentServer) {
	s.RegisterService(&_ClusterAgent_serviceDesc, srv)
}

func _ClusterAgent_LoadCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAgentServer).LoadCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moc.cloudagent.cluster.ClusterAgent/LoadCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAgentServer).LoadCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAgent_UnloadCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAgentServer).UnloadCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moc.cloudagent.cluster.ClusterAgent/UnloadCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAgentServer).UnloadCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAgent_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAgentServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moc.cloudagent.cluster.ClusterAgent/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAgentServer).GetCluster(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterAgent_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterAgentServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moc.cloudagent.cluster.ClusterAgent/GetNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterAgentServer).GetNodes(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterAgent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moc.cloudagent.cluster.ClusterAgent",
	HandlerType: (*ClusterAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadCluster",
			Handler:    _ClusterAgent_LoadCluster_Handler,
		},
		{
			MethodName: "UnloadCluster",
			Handler:    _ClusterAgent_UnloadCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _ClusterAgent_GetCluster_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _ClusterAgent_GetNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
